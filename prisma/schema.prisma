// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Points_of_sales {
  pos_id      String      @id @default(uuid()) @db.Uuid
  name        String      @db.VarChar(45)
  address     String      @db.VarChar(100)
  employees   Employees[]
  products    Products[]
  last_update DateTime    @updatedAt
}

model Products_categories {
  category_id String     @id @default(uuid()) @db.Uuid
  name        String     @unique @db.VarChar(45)
  products    Products[]
  last_update DateTime   @updatedAt
}

model Providers {
  provider_id  String     @id @default(uuid()) @db.Uuid
  name         String     @db.VarChar(45)
  phone_number String     @db.VarChar(45)
  email        String?    @db.VarChar(100)
  products     Products[]
  last_update  DateTime   @updatedAt
}

model Employees {
  employee_id       String          @id @default(uuid()) @db.Uuid
  CID               String          @unique @db.VarChar(11)
  first_name        String          @db.VarChar(45)
  last_name         String          @db.VarChar(45)
  address           String          @db.VarChar(100)
  phone_number      String          @db.VarChar(45)
  point_of_sales_id String          @db.Uuid
  point_of_sales    Points_of_sales @relation(fields: [point_of_sales_id], references: [pos_id], onDelete: SetNull, onUpdate: Cascade)
  sales             Sales[]
  user              Users?
  salary            Salary?
  last_update       DateTime        @updatedAt
}

model Expenses_category {
  category_id String     @id @default(uuid()) @db.Uuid
  name        String     @db.VarChar(45)
  expenses    Expenses[]
  last_update DateTime   @updatedAt
}

model Products {
  product_id         String               @id @default(uuid()) @db.Uuid
  branch             String               @db.VarChar(45)
  model              String               @db.VarChar(45)
  category_id        String
  category           Products_categories? @relation(fields: [category_id], references: [category_id], onDelete: SetNull, onUpdate: Cascade)
  description        String               @db.VarChar(255)
  purchase_price     Decimal              @db.Decimal(10, 2)
  purchase_date      DateTime
  provider_id        String
  provider           Providers?           @relation(fields: [provider_id], references: [provider_id], onDelete: SetNull, onUpdate: Cascade)
  stock_quantity     Int
  amount             Decimal              @db.Decimal(10, 2)
  sales              Sales[]
  purchases          Purchases[]
  last_update        DateTime             @updatedAt
  points_of_sales_id String
  points_of_sales    Points_of_sales?     @relation(fields: [points_of_sales_id], references: [pos_id], onDelete: SetNull, onUpdate: Cascade)
}

model Salary {
  salary_id   String    @id @default(uuid()) @db.Uuid
  employee_id String    @unique @db.Uuid
  employee    Employees @relation(fields: [employee_id], references: [employee_id], onDelete: SetNull, onUpdate: Cascade)
  amount      Decimal   @db.Decimal(10, 2)
  date        DateTime
  last_update DateTime  @updatedAt
}

model Sales {
  sales_id     String    @id @default(uuid()) @db.Uuid
  products_id  String    @db.Uuid
  products     Products  @relation(fields: [products_id], references: [product_id], onDelete: SetNull, onUpdate: Cascade)
  employee_id  String    @db.Uuid
  employee     Employees @relation(fields: [employee_id], references: [employee_id], onDelete: SetNull, onUpdate: Cascade)
  quantity     Int
  date         DateTime
  unit_price   Decimal   @db.Decimal(10, 2)
  total_amount Decimal   @db.Decimal(10, 2)
  last_update  DateTime  @updatedAt
}

model Purchases {
  purchases_id String   @id @default(uuid()) @db.Uuid
  products_id  String   @db.Uuid
  products     Products @relation(fields: [products_id], references: [product_id], onDelete: SetNull, onUpdate: Cascade)
  quantity     Int
  date         DateTime
  unit_price   Decimal  @db.Decimal(10, 2)
  total_amount Decimal  @db.Decimal(10, 2)
  last_update  DateTime @updatedAt
}

model Expenses {
  expenses_id     String            @id @default(uuid()) @db.Uuid
  amount          Decimal           @db.Decimal(10, 2)
  date            DateTime
  exp_category_id String            @db.Uuid
  exp_category    Expenses_category @relation(fields: [exp_category_id], references: [category_id], onDelete: SetNull, onUpdate: Cascade)
  last_update     DateTime          @updatedAt
}

model Users {
  user_id          String     @id @default(uuid()) @db.Uuid
  username         String     @db.VarChar(16)
  password         String
  employee_id      String     @unique @db.Uuid
  employee         Employees? @relation(fields: [employee_id], references: [employee_id], onDelete: SetNull, onUpdate: Cascade)
  created_at       DateTime   @default(now())
  last_time_online DateTime?
  last_update      DateTime   @updatedAt
}
